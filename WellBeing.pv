(* 
                                **** WellBeing Data sharing protocol ****
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ 
|                                                                                                       |
|    M1  | U1 ->  I  | { N_1, U1, Id_M, Id'_M }_pkI, { H(N_1, Id_M, Id'_M) }_skU1                       |
|    M2  | I  ->  S  | { N_2, U1, I, Id_M, QmH(Id'_M) }_pkS, { H(N_1, Id_M, Id'_M) }_skI                |  
|    M3  | S  ->  I  | { N_2, U1, S }_pkI, { H(N_2, U1, S) }_skS                                        |                           
|    M4  | I  ->  U1 | { N_1, I }_pkU1, { N_1, I }_skI                                                  |                                
|    M5  | U2 ->  S  | { N_3, U1 }_pkS, { H(N_3, U1) }_skU2                                             |
|    M6  | S  ->  U2 | { N_3, U1, Id_M }_pkU2, { H(N_3, U1, Id_M) }_skS                                 |
|    M7  | U2 ->  U1 | { N_4, U2, Id_M }_pkU1, { H(N_4, U2, Id_M) }_skU2,                               |
|    M8  | U1 ->  S  | { N_5, Id_M, U1, U2 }_pkS, { H(N_5, Id_M, U1, U2) }_skU1,                        |
|    M9  | S  ->  I  | { N_6, QmH(Id'_M), S, U1, U2 }_pkI, { H(N_6, QmH(Id'_M), S, U1, U2)}_skS         |
|    M10 | I  ->  S  | { N_6, Id'_M, I, U1, U2 }_pkS, { H(N_6, Id'_M, I, U1, U2) }_skI                  |
|    M11 | S  ->  U1 | { N_5, Id'_M, S }_pkU1, { H(N_5, Id'_M, S) }_skS                                 |
|    M12 | U1 ->  S  | { N_7, TknU1U2, A, U1, U2, TC}_pkS, { H(N_7, TknU1U2, A, U1, U2, TC) }_skU1 }    |
|    M13 | S ->  U1  | { N_7, TknU1U2, S, U2}_pkU1, { H(N_7, TknU1U2, S, U2) }_skS }                    |
|    M14 | U1 ->  U2 | { N_4, TknU1U2, U1}_pkU2, { H(N_4, TknU1U2, U1) }_skU1                           |
|    M15 | U2 ->  S  | { N_8, TknU1U2, U1, U2}_pkS, { H(N_8, TknU1U2, U1, U2) }_skU2                    |
|    M16 | S  ->  U2 | { N_8, A, S}_pkU2, { H(N_8, A, S) }_skS                                          |
 __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __

Id'_M = { {M}_pkU1, H(M)skU1 }, A = { {M'}_pkU2, H(M')skU1 }

*)



set ignoreTypes = false.
(* set traceDisplay = long. *)

free c: channel.

type host.
type nonce.
type pkey.
type skey.


(* Type converter function *)
fun nonce_to_bitstring(nonce): bitstring [data,typeConverter].
fun bitstring_to_nonce(bitstring): nonce [data,typeConverter].
fun host_to_bitstring(host): bitstring [data,typeConverter].
fun bitstring_to_host(bitstring): host [data,typeConverter].


(* Public key encryption *)
fun pk(skey): pkey.
fun encrypt(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; decrypt(encrypt(x,pk(y)),y) = x.


(* Signatures *)
fun sign(bitstring, skey): bitstring.
reduc forall m: bitstring, k: skey; checksign(sign(m,k), pk(k)) = m.


(* Hash function *)
fun hash(bitstring): bitstring.


(* QmHash function *)
fun qmhash(bitstring): bitstring.


(* Secrecy assumptions *)
not attacker(new skU1).
not attacker(new skU2).
not attacker(new skS).
not attacker(new skI).


(* Honest host names U1, U2, S, I *)
free U1, U2, S, I: host.


(* Secret declaration *)
free wellBeingData, tokenU1U2, metaData, tempWellBeing : bitstring [private].


(* Secrecy query *)
query attacker(wellBeingData);
      attacker(tempWellBeing);
      attacker(tokenU1U2).


(* Event declarations *)
event beginMetadataUpload(host, host, nonce, bitstring).
event endMetadataUpload(host, host, nonce, bitstring).
event beginDataSharingRequest(host, bitstring).
event endDataSharingRequest(host, host, bitstring).
event beginDataReadByRequester(host, host, bitstring).
event endDataReadByRequester(host, host, bitstring).
event beginSendTokenTorequester(host, host, nonce, bitstring).
event endSendTokenTorequester(host, host, nonce, bitstring).
event beginRetriveDataFromIpfs(host, host, nonce, bitstring).
event endRetriveDataFromIpfs(host, host, nonce, bitstring).
event beginSendEncDataToRequester(host, host, nonce, bitstring).
event endSendEncDataToRequester(host, host, nonce, bitstring).
event beginFetchingDataQmHash(host, host, nonce, bitstring).
event endFetchingDataQmHash(host, host, nonce, bitstring).


(* Event execution queries *)
query owner: host, ipfs: host, upNonce: nonce, meta: bitstring; event(beginMetadataUpload(owner, ipfs, upNonce, meta)).
query owner: host, ipfs: host, upNonce: nonce, meta: bitstring; event(endMetadataUpload(owner, ipfs, upNonce, meta)).
query owner: host, requester: host, meta: bitstring, token: bitstring; event(endDataSharingRequest(owner, requester, token)).
query requester: host, meta: bitstring, sharingNonce: nonce; event(beginDataSharingRequest(requester, meta)).
query owner: host, requester: host, tokenNonce: nonce, token: bitstring; event(beginSendTokenTorequester(owner, requester, tokenNonce, token)).
query owner: host, requester: host, tokenNonce: nonce, token: bitstring; event(endSendTokenTorequester(owner, requester, tokenNonce, token)).
query owner: host, requester: host, retriveNonce: nonce, meta: bitstring; event(beginRetriveDataFromIpfs(owner, requester, retriveNonce, meta)).
query owner: host, requester: host, retriveNonce: nonce, meta: bitstring; event(endRetriveDataFromIpfs(owner, requester, retriveNonce, meta)).
query ipfs: host, dappNonde: host, recData: nonce, qmHash: bitstring; event(beginFetchingDataQmHash(ipfs, dappNonde, recData, qmHash)).
query ipfs: host, dappNonde: host, recData: nonce, qmHash: bitstring; event(endFetchingDataQmHash(ipfs, dappNonde, recData, qmHash)).
query owner: host, requester: host, sendEncData: nonce, token: bitstring; event(beginSendEncDataToRequester(owner, requester, sendEncData, token)).
query owner: host, requester: host, sendEncData: nonce, token: bitstring; event(endSendEncDataToRequester(owner, requester, sendEncData, token)).
query owner: host, requester: host, tempWellBeingData: bitstring; event(beginDataReadByRequester(owner, requester, tempWellBeingData)).
query owner: host, requester: host, tempWellBeingData: bitstring; event(endDataReadByRequester(owner, requester, tempWellBeingData)).


(* Correspondence Assertion Queries *)
query owner: host, ipfs: host, nonce: nonce, meta: bitstring; inj-event(endMetadataUpload(owner, ipfs, nonce, meta)) ==> inj-event(beginMetadataUpload(owner, ipfs, nonce, meta)).
query owner: host, requester: host, meta: bitstring, token: bitstring; inj-event(endDataSharingRequest(owner, requester, token)) ==> inj-event(beginDataSharingRequest(requester, meta)).
query owner: host, requester: host, tokenNonce: nonce, token: bitstring; inj-event(endSendTokenTorequester(owner, requester, tokenNonce, token)) ==> inj-event(beginSendTokenTorequester(owner, requester, tokenNonce, token)).
query owner: host, requester: host, retriveNonce: nonce, meta: bitstring; inj-event(endRetriveDataFromIpfs(owner, requester, retriveNonce, meta)) ==> inj-event(beginRetriveDataFromIpfs(owner, requester, retriveNonce, meta)).
query owner: host, requester: host, sendEncData: nonce, token: bitstring; inj-event(endSendEncDataToRequester(owner, requester, sendEncData, token)) ==> inj-event(beginSendEncDataToRequester(owner, requester, sendEncData, token)).
query ipfs: host, dappNonde: host, recData: nonce, qmHash: bitstring; inj-event(endFetchingDataQmHash(ipfs, dappNonde, recData, qmHash)) ==> inj-event(beginFetchingDataQmHash(ipfs, dappNonde, recData, qmHash)).
query owner: host, requester: host, tempWellBeingData: bitstring; inj-event(endDataReadByRequester(owner, requester, tempWellBeingData)) ==> inj-event(beginDataReadByRequester(owner, requester, tempWellBeingData)).


(* Complex Assertion Quries *)
query owner: host, requester: host, meta: bitstring, token: bitstring, tempWellBeingData: bitstring, tokenNonce: nonce; 
        inj-event(endDataReadByRequester(owner, requester, tempWellBeingData)) ==> (inj-event(endDataSharingRequest(owner, requester, token)) ==> inj-event (endSendTokenTorequester(owner, requester, tokenNonce, token))).

(* U1 process *)
let processU1(skU1: skey, pkS: pkey, pkU2: pkey, pkI: pkey) = 

    in (c, 
            (
                xI: host, 
                xU2: host
            )
        );
	if (xI = I) && (xU2 = U2) then
	let pkU1 = pk(skU1) in

    (* M1 *)
    if xI = I then 
    new N1: nonce;
    out (c,  
            (
                encrypt((N1, U1, metaData, encrypt(wellBeingData, pkU1), sign(hash(wellBeingData), skU1)), pkI),
                sign(hash((nonce_to_bitstring(N1), host_to_bitstring(U1), metaData, encrypt(wellBeingData, pkU1), sign(hash(wellBeingData), skU1))), skU1)
            )
        );

    (* M4 *)
    in (c, 
            (
                encM4: bitstring, 
                encSigM4: bitstring
            )
        );
    let (=N1, =I) = decrypt(encM4, skU1) in
    let (sigM4: bitstring) = checksign(encSigM4, pkI) in
    if sigM4 = hash((nonce_to_bitstring(N1), host_to_bitstring(I))) then event endMetadataUpload(U1, I, N1, metaData);
    
    (* M7 *)
    in (c, 
            (
                encM7: bitstring, 
                encSigM7: bitstring
            )
        );
    let (sigM7: bitstring) = checksign(encSigM7, pkU2) in
    let(xN4: nonce, =U2, =metaData) = decrypt(encM7, skU1) in
    if (sigM7 = hash((nonce_to_bitstring(xN4), host_to_bitstring(U2), metaData))) then event beginDataSharingRequest(U2, metaData);

    (* M8 *)
    new N5: nonce;
    out (c, 
            (
                encrypt((N5, metaData, U1, U2), pkS), 
                sign(hash((nonce_to_bitstring(N5), metaData, host_to_bitstring(U1), host_to_bitstring(U2))), skU1)
            )
        );
    
    (* M11 *)
    in (c, 
            (
                encM11: bitstring, 
                encSigM11: bitstring
            )
        );
    let(sigM11: bitstring) = checksign(encSigM11, pkS) in
    let(=N5, xEncWellbeing: bitstring, xSignedHashedWellBeing: bitstring, =S) = decrypt(encM11, skU1) in
    if sigM11=hash((nonce_to_bitstring(N5), xEncWellbeing, xSignedHashedWellBeing, host_to_bitstring(S))) then
    let (=wellBeingData) = decrypt(xEncWellbeing, skU1) in
    let hashedWellbeing = checksign(xSignedHashedWellBeing, pkU1) in
    if hashedWellbeing = hash(wellBeingData) then
    event endRetriveDataFromIpfs(U1, U2, N5, metaData);
    event beginDataReadByRequester(U1, U2, tempWellBeing);
    
    (* M12 *)
    new tc: bitstring;
    new N7: nonce;
    out (c, 
            (  
                encrypt((N7, tokenU1U2, encrypt(tempWellBeing, pkU2), sign(hash(tempWellBeing), skU1), U1, U2, tc), pkS),
                sign(hash((nonce_to_bitstring(N7), tokenU1U2, encrypt(tempWellBeing, pkU2), sign(hash(tempWellBeing), skU1),  host_to_bitstring(U1), host_to_bitstring(U2), tc)), skU1)
            )
        );

    (* M13 *)
    in (c, 
            (
                encM13: bitstring,
                encSigM13: bitstring
            )
       );
    let (=N7, =tokenU1U2, =S, =U2) = decrypt(encM13, skU1) in
    let (sigM13: bitstring) = checksign(encSigM13, pkS) in
    if sigM13 = hash((nonce_to_bitstring(N7), tokenU1U2, host_to_bitstring(S), host_to_bitstring(U2))) then
    event beginSendTokenTorequester(U1, U2, xN4, tokenU1U2);
    
    (* M14 *)
    out (c, 
            (
                encrypt((xN4, tokenU1U2, U1), pkU2), 
                sign(hash((nonce_to_bitstring(xN4), tokenU1U2, host_to_bitstring(U1))), skU1)
            )
        );
    0.



(* U2 process *)
let processU2(skU2: skey, pkS: pkey, pkU1: pkey) = 

    in (c, 
            (
                xU1: host, 
                xS: host
            )
        );
	if (xU1 = U1) && (xS = S) then
	let pkU2 = pk(skU2) in

    (* M5 *)
    new N3: nonce;
    out (c, 
            (
                encrypt((N3, U1), pkS), 
                sign(hash((nonce_to_bitstring(N3), host_to_bitstring(U1))), skU2)
            )
        );

    (* M6 *)
    in (c, 
            (
                encM6: bitstring, 
                encSigM6: bitstring
            )
        );
    let (sigM6: bitstring) = checksign(encSigM6, pkS) in
    let (=N3, =U1, =metaData) = decrypt(encM6, skU2) in
    if (sigM6 = hash((nonce_to_bitstring(N3), host_to_bitstring(U1), metaData))) then

    (* M7 *)
    new N4: nonce;
    out(c, 
            (
                encrypt((N4, U2, metaData), pkU1), 
                sign(hash((nonce_to_bitstring(N4), host_to_bitstring(U2), metaData)), skU2)
            )
        );

    (* M14 *)
    in (c, 
            (
                encM14: bitstring, 
                encSigM14: bitstring
            )
        );
    let (sigM14: bitstring) = checksign(encSigM14, pkU1) in
    let (=N4, =tokenU1U2, =U1) = decrypt(encM14, skU2) in
    if (sigM14=hash((nonce_to_bitstring(N4), tokenU1U2, host_to_bitstring(U1)))) then
    event endSendTokenTorequester(U1, U2, N4, tokenU1U2);
    event endDataSharingRequest(U1, U2, tokenU1U2);

    (* M15 *)
    new N8: nonce;
    out (c, 
            (
                encrypt((N8, tokenU1U2, U1, U2), pkS), 
                sign(hash((nonce_to_bitstring(N8), tokenU1U2, host_to_bitstring(U1), host_to_bitstring(U2))), skU2)
            )
        );

    (* M16 *)
    in (c, 
            (
                encM16: bitstring, 
                encSigM16: bitstring
            )
        );
    let (sigM16: bitstring ) = checksign(encSigM16, pkS) in
    let (=N8, tempDataEncFromMes: bitstring, tempDataHashFromMes: bitstring, =S ) = decrypt(encM16, skU2) in
    if sigM16 = hash((nonce_to_bitstring(N8), tempDataEncFromMes, tempDataHashFromMes, host_to_bitstring(S))) then event endSendEncDataToRequester(U1, U2, N8, tokenU1U2);
    let (=tempWellBeing) = decrypt(tempDataEncFromMes, skU2) in
    let (decTempDataSigned: bitstring) = checksign(tempDataHashFromMes, pkU1) in
    if decTempDataSigned = hash(tempWellBeing) then event endDataReadByRequester(U1, U2, tempWellBeing);
    0.



(* I process *)
let processI(pkS: pkey, skI: skey, pkU1: pkey) = 

    (* M1 *)
    in (c, 
            (
                encM1: bitstring, 
                encSigM1: bitstring
            )
        );
    let (xN1: nonce, =U1, =metaData, encWellbeing: bitstring, hashedWellBeingSigned: bitstring) = decrypt(encM1, skI) in
    let (sigM1: bitstring) = checksign(encSigM1, pkU1) in
    if (sigM1 = hash((nonce_to_bitstring(xN1), host_to_bitstring(U1), metaData, encWellbeing, hashedWellBeingSigned))) then
    let pkI = pk(skI) in
    
    (* M2 *)
    let qmHashData = qmhash((encWellbeing, hashedWellBeingSigned)) in
    event beginMetadataUpload(U1, I, xN1, metaData);
    new N2: nonce;
    out (c, 
            (
               encrypt((N2, U1, I, metaData, qmHashData), pkS),
               sign(hash((nonce_to_bitstring(N2), host_to_bitstring(U1), host_to_bitstring(I), metaData, qmHashData)), skI)
            )
        );

    (* M3 *)   
    in (c, 
            (
                encM3: bitstring,
                encSigM3: bitstring
            )
       );  
    let (=N2, =U1, =S) = decrypt(encM3, skI) in
    let (sigM3: bitstring) = checksign(encSigM3, pkS) in
    if sigM3 = hash((nonce_to_bitstring(N2), host_to_bitstring(U1), host_to_bitstring(S))) then

    (* M4 *)
    out (c, 
            (
                encrypt((xN1, I), pkU1),
                sign(hash((nonce_to_bitstring(xN1), host_to_bitstring(I))), skI)
            )
        );

    (* M9 *)
    in (c, 
            (
                encM9: bitstring, 
                encSigM9: bitstring
            )
        );
    let (sigM9: bitstring) = checksign(encSigM9, pkS) in
    let (xN6: nonce, qmHashDataEnc: bitstring, =S, =U1, =U2) = decrypt(encM9, skI) in
    if (sigM9 = hash((nonce_to_bitstring(xN6), qmHashDataEnc, host_to_bitstring(S), host_to_bitstring(U1), host_to_bitstring(U2)))) then
    event beginFetchingDataQmHash(I, S, xN6, qmHashDataEnc);

    (* M10 *)
    out (c, 
            (
                encrypt((xN6, encWellbeing, hashedWellBeingSigned, I, U1, U2), pkS), 
                sign((hash((nonce_to_bitstring(xN6), encWellbeing, hashedWellBeingSigned, host_to_bitstring(I), host_to_bitstring(U1), host_to_bitstring(U2)))), skI)
            )
        );
    0.



(* S process *)
let processS(skS: skey, pkU1: pkey, pkU2: pkey, pkI: pkey) = 

    (* M2 *)
    in (c, 
            (
                encM1: bitstring, 
                encSigM1: bitstring
            )
        );
    let (xN2: nonce, =U1, =I, =metaData, xQmHashData: bitstring) = decrypt(encM1, skS) in
    let (sigM1: bitstring) = checksign(encSigM1, pkI) in
    if (sigM1 = hash((nonce_to_bitstring(xN2), host_to_bitstring(U1), host_to_bitstring(I), metaData, xQmHashData))) then 

    (* M3 *)
    out (c,
            (
                encrypt((xN2, U1, S), pkI),
                sign(hash((nonce_to_bitstring(xN2), host_to_bitstring(U1), host_to_bitstring(S))), skS)
            )
        );

    let pkS = pk(skS) in

    (* M5 *)
    in (c, 
            (
                encM5: bitstring, 
                encSigM5: bitstring
            )
        );
    let (sigM5: bitstring) = checksign(encSigM5, pkU2) in
    let (xN3:nonce, =U1) = decrypt(encM5, skS) in
    if (sigM5=hash((nonce_to_bitstring(xN3), host_to_bitstring(U1)))) then

    (* M6 *)
    out (c, 
            (
                encrypt((xN3, U1, metaData),pkU2), 
                sign(hash((nonce_to_bitstring(xN3), host_to_bitstring(U1), metaData)), skS)
            )
        );

    (* M8 *) 
    in (c, 
            (
                encM8: bitstring, 
                encSigM8: bitstring
            )
        );
    let (sigM8: bitstring) = checksign(encSigM8, pkU1) in
    let (xN5: nonce, =metaData, =U1, =U2) = decrypt(encM8, skS) in
    if (sigM8 = hash((nonce_to_bitstring(xN5), metaData, host_to_bitstring(U1), host_to_bitstring(U2)))) then
    event beginRetriveDataFromIpfs(U1, U2, xN5, metaData);
    
    (* M9 *) 
    new N6: nonce;
    out (c, 
            (
                encrypt((N6, xQmHashData, S, U1, U2), pkI), 
                sign(hash((nonce_to_bitstring(N6), xQmHashData, host_to_bitstring(S), host_to_bitstring(U1), host_to_bitstring(U2))), skS)
            )
        );

    (* M10 *) 
    in (c, 
            (
                encM10: bitstring, 
                encSigM10: bitstring
            )
        );
    let(sigM10: bitstring) = checksign(encSigM10, pkI) in
    let(=N6, encWellBeing: bitstring, encWellBeingHashed: bitstring, =I, =U1, =U2) = decrypt(encM10, skS) in
    if sigM10=hash((nonce_to_bitstring(N6), encWellBeing, encWellBeingHashed, host_to_bitstring(I), host_to_bitstring(U1), host_to_bitstring(U2))) then
    event endFetchingDataQmHash(I, S, N6, xQmHashData);

    (* M11 *) 
    out (c, 
            (
                encrypt((xN5, encWellBeing, encWellBeingHashed, S), pkU1), 
                sign(hash((nonce_to_bitstring(xN5), encWellBeing, encWellBeingHashed, host_to_bitstring(S))), skS)
            )
        );

    (* M12 *) 
    in (c, 
            (
                encM12: bitstring, 
                encSigM12: bitstring
            )
        );
    let(hashTokenEncData: bitstring) = checksign(encSigM12, pkU1) in
    let(xN7: nonce, =tokenU1U2, encTempMetadataSign: bitstring, encHashTempDataSign: bitstring, =U1, =U2, tcSign: bitstring) = decrypt(encM12, skS) in  
    if(hashTokenEncData=hash((nonce_to_bitstring(xN7), tokenU1U2, encTempMetadataSign, encHashTempDataSign, host_to_bitstring(U1), host_to_bitstring(U2), tcSign))) then
    
    (* M13 *)
    out (c, 
            (
                encrypt((xN7, tokenU1U2, S, U2), pkU1),
                sign(hash((nonce_to_bitstring(xN7), tokenU1U2, host_to_bitstring(S) ,host_to_bitstring(U2))), skS)
            )
        );
    
    (* M15 *) 
    in (c, 
            (
                encM15: bitstring,
                encSigM15: bitstring
            )
        );
    let(xN8: nonce, =tokenU1U2, =U1, =U2) = decrypt(encM15, skS) in
    let(sigM15: bitstring) = checksign(encSigM15, pkU2) in
    if sigM15=hash((nonce_to_bitstring(xN8), tokenU1U2, host_to_bitstring(U1), host_to_bitstring(U2))) then
    event beginSendEncDataToRequester(U1, U2, xN8, tokenU1U2);

   (* M16 *) 
    out (c, 
            (
                encrypt((xN8, encTempMetadataSign, encHashTempDataSign, S), pkU2), 
                sign(hash((nonce_to_bitstring(xN8), encTempMetadataSign, encHashTempDataSign, host_to_bitstring(S))), skS)
            )
        );
    0.


(* Main process setup *)
process 
    new skU1: skey;
	let pkU1 = pk(skU1) in
        out(c, pkU1);
    new skU2: skey;
	let pkU2 = pk(skU2) in
        out(c, pkU2);
    new skS: skey;
	let pkS = pk(skS) in
	    out(c, pkS);
    new skI: skey;
	let pkI = pk(skI) in
	    out(c, pkI);
	(
          (* Launch an unbounded number of sessions of the data owner *)
          (!processU1(skU1, pkS, pkU2, pkI)) | 
          
          (* Launch an unbounded number of sessions of the data requester *)
          (!processU2(skU2, pkS, pkU1)) |
          
          (* Launch an unbounded number of sessions of the IPFS node *)
          (!processI(pkS, skI, pkU1)) |
          
          (* Launch an unbounded number of sessions of the DApp node without IPFS *)
	      (!processS(skS, pkU1, pkU2, pkI))
    )
